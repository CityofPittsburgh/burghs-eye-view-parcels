.libPaths("C:/util")
library(rgdal)
install.packages("rgdal")
library(purrr)
.libPaths("C:/util")
install.packages(c("gpclib", "maptools", "plyr", "rgdal", "rgeos", "shiny", "shinythemes", "sp"))
.libPaths("C:/util")
.libPaths("C:/util")
.libPaths("C:/util")
setwd("~/GitHub/burghs-eye-view-parcels")
library(rgdal)
library(jsonlite)
library(httr)
library(dplyr)
library(plyr)
library(lubridate)
library(geojsonio)
hoodname <- jsonlite::fromJSON("hoods.json")
couchdb_un <- jsonlite::fromJSON("key.json")$couchdb_un
couchdb_pw <- jsonlite::fromJSON("key.json")$couchdb_pw
i <- "windgap"
url <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", i)
g <- GET(url, authenticate(couchdb_un, couchdb_pw))
c <- content(g, "text")
p <- readOGR(c, "OGRGeoJSON", verbose = F)
i <- "perry_south"
url <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", i)
g <- GET(url, authenticate(couchdb_un, couchdb_pw))
c <- content(g, "text")
p <- readOGR(c, "OGRGeoJSON", verbose = F)
i <- "bloomfield"
url <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", i)
g <- GET(url, authenticate(couchdb_un, couchdb_pw))
c <- content(g, "text")
p <- readOGR(c, "OGRGeoJSON", verbose = F)
hood_list <- jsonlite::fromJSON("hoods.json")
setwd("~/GitHub/burghs-eye-view-parcels")
shiny::runApp()
library(leaflet)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/GitHub/burghs-eye-view-parcels")
runApp()
runApp()
runApp()
i <- "central_business_district"
r <- GET(paste0(baseURL,i, "/"))
baseURL <- "http://tools.wprdc.org/geoservice/parcels_in/pittsburgh_neighborhood/"
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
couchdb_un <- jsonlite::fromJSON("key.json")$couchdb_un
couchdb_pw <- jsonlite::fromJSON("key.json")$couchdb_pw
##Query Ckan API for Property Assessment Data
query <- "https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20%22PARID%22%2C%22PROPERTYHOUSENUM%22%2C%22PROPERTYFRACTION%22%2C%22PROPERTYADDRESS%22%2C%22PROPERTYZIP%22%2C%22MUNIDESC%22%2C%22TAXDESC%22%2C%22CLASSDESC%22%2C%22OWNERDESC%22%2C%22USEDESC%22%2C%22HOMESTEADFLAG%22%2C%22COUNTYLAND%22%2C%22COUNTYBUILDING%22%2C%22COUNTYTOTAL%22%2C%22SALEPRICE%22%2C%22SALEDATE%22%2C%22YEARBLT%22%20from%20%22518b583f-7cc8-4f60-94d0-174cc98310dc%22%20WHERE%20%22SCHOOLCODE%22%20LIKE%20%2747%27&limit=9999999"
getdata <- GET(url=query)
assessment <- jsonlite::fromJSON(content(getdata, "text"))
assessment <- assessment$result$records
assessment$MUNIDESC <- as.factor(assessment$MUNIDESC)
assessment <- subset(assessment, MUNIDESC != "Mt. Oliver  ")
##Query Ckan API for Delinquent
delinquent.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=ed0d1550-c300-4114-865c-82dc7c23235b&limit=99999"
getdelqdata <- GET(url=delinquent.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
delq <- jsonlite::fromJSON(content(getdelqdata, "text"))
delq <- delq$result$records
assessment$delq <- ifelse(assessment$PARID %in% delq$pin, TRUE, FALSE)
##Query Ckan API for City owned property
ownership.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=4ff5eb17-e2ad-4818-97c4-8f91fc6b6396&limit=99999"
getownerdata <- GET(url=ownership.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
ownership <- jsonlite::fromJSON(content(getownerdata, "text"))
ownership <- ownership$result$records
assessment$cityown <- ifelse(assessment$PARID %in% ownership$pin, TRUE, FALSE)
##Query Ckan API for Property Tax Abatements
abatement.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=fd924520-d568-4da2-967c-60b3a305e681&limit=99999"
getabatedata <- GET(url=abatement.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
abatement <- jsonlite::fromJSON(content(getabatedata, "text"))
abatement <- abatement$result$records
abatement <- subset(abatement, select = c("pin", "program_name", "start_year", "num_years", "abatement_amt"))
abatement$abatement <- TRUE
##Lien Data
system('python pittsburghliens.py')
liens <- read.csv("liens.csv")
##Neighborhood
system('python pghhoods.py')
load.nhood <- jsonlite::fromJSON("./pghnhoods.txt")
load.nhood <- load.nhood$result$records
load.nhood$geo_name_nhood <- as.factor(load.nhood$geo_name_nhood)
##Create neighborhood JSON list
hood_list <- as.list(levels(load.nhood$geo_name_nhood))
hood_list <- gsub("\\-", "_", hood_list)
hood_list <- gsub(" ", "_", hood_list)
hood_list <- gsub("\\.", "", hood_list)
hood_list <- tolower(hood_list)
write_json(hood_list, "hoodlist.json")
##Merge all datasets together
parcels <- merge(assessment, abatement, by.x = "PARID", "pin", all.x = TRUE)
parcels$ADDRESS <- paste(parcels$PROPERTYHOUSENUM, parcels$PROPERTYADDRESS)
parcels$SALEDATE <- gsub("-", "/", parcels$SALEDATE)
parcels$SALEDATE <- as.Date(parcels$SALEDATE, "%m/%d/%Y")
parcels.liens <- merge(parcels, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
parcels.hoods <- merge(parcels.liens, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
parcels.hoods$nhood <- gsub("\\-", "_", parcels.hoods$geo_name_nhood)
parcels.hoods$nhood <- gsub(" ", "_", parcels.hoods$nhood)
parcels.hoods$nhood <- gsub("\\.", "", parcels.hoods$nhood)
parcels.hoods$nhood <- tolower(parcels.hoods$nhood)
##General Cleaning
parcels.hoods$abatement_amt[is.na(parcels.hoods$abatement_amt)] <- 0
parcels.hoods$amount[is.na(parcels.hoods$amount)] <- 0
parcels.hoods$owedto[is.na(parcels.hoods$owed)] <- 0
parcels.hoods$program_name[is.na(parcels.hoods$program_name)] <- "No Abatement"
parcels.hoods$abatement[is.na(parcels.hoods$abatement)] <- FALSE
##Set colors for map
parcels.hoods$colorval <- "#ccc7c7"
parcels.hoods$colorval <- ifelse(parcels.hoods$program_name == "No Abatement", parcels.hoods$colorval, "#4daf4a")
parcels.hoods$colorval <- ifelse(parcels.hoods$cityown == TRUE, "#ffff33", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$tif == TRUE, "#f781bf", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$USEDESC == "VACANT LAND", "#a65628", parcels.hoods$colorval)
parcels.hoods$colorval <- ifelse(parcels.hoods$delq == TRUE, "#e41a1c", parcels.hoods$colorval)
parcels.final <- subset(parcels.hoods, nhood != "")
parcels.final$nhood <- as.factor(parcels.final$nhood)
colnames(parcels.final)[1] <- "pin"
hood <- subset(parcels.final, geo_name_nhood == i)
hood <- subset(parcels.final, nhood == i)
runApp()
runApp()
runApp()
View(hood)
org.data <- org@data
View(org.data)
leaflet(org)%>%
addPolygons()
leaflet(org)%>%addPolygons(popup = pin)
leaflet(org)%>%addPolygons(popup = ~pin)
org.data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
org.test <- org@data
row.names(org.test)
parcels.final$pin <- as.character(parcels.final$pin)
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
##Final add data
hood <- subset(parcels.final, nhood == i)
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
org <- org["mapblocklo" != "Not Assessed" | "mapblocklo" != "COMMON GROUND",]
leaflet(org)%>%addPolygons(popup = ~pin)
org <- readOGR(f, "OGRGeoJSON", verbose = F)
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = TRUE)
leaflet(org)%>%addPolygons(popup = ~pin)
org <- readOGR(f, "OGRGeoJSON", verbose = F)
org$rowname <- 1:nrow(org)
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
org@data <- org@data[order(org@data$rowname)]
org@data <- org@data[order(org@data$rowname),]
leaflet(org)%>%addPolygons(popup = ~pin)
baseURL <- "http://tools.wprdc.org/geoservice/parcels_in/pittsburgh_neighborhood/"
setwd("~/GitHub/burghs-eye-view-parcels")
runApp()
runApp()
runApp()
url <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", i)
g <- GET(url, authenticate(couchdb_un, couchdb_pw))
c <- content(g, "text")
c
tj <- toJSON(c)
g$url
g$status_code
g$headers$etag
rev <- g$headers$etag
rev <- as.character(rev)
typeof(rev)
rev <- gsub("\", "", rev)
rev <- gsub("\", "", rev))
rev <- gsub("\\", "", rev)
rev <- gsub("\", "", rev)
rev
rev
rev <- gsub("[[:punct:]]", " ", rev)
rev
rev <- g$headers$etag
rev
rev <- gsub('\"', "", rev)
rev <- g$headers$etag
rev <- gsub('\"', "", rev)
rev
_rev <- rev
"_rev" <- rev
runApp()
p@_rev <- 0986987569875698760986708
p@`_rev <- 0986987569875698760986708
p@`_rev` <- 0986987569875698760986708
g.org@`_rev` <- 0986987569875698760986708
g.org <- readr::read_lines(i)
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
##Final add data
hood <- subset(parcels.final, nhood == i)
org$rowname <- 1:nrow(org)
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
org@data <- org@data[order(org@data$rowname),]
org <- org["mapblocklo" != "Not Assessed" | "mapblocklo" != "COMMON GROUND",]
#setwd("./neighborhoodparcels")
writeOGR(org, i, layer="meuse", driver="GeoJSON")
g.org <- readr::read_lines(i)
g.org@`_rev` <- 0986987569875698760986708
org@`_rev` <- 8834343
revurl <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", i)
revg <- GET(revurl, authenticate(couchdb_un, couchdb_pw))
revid <- revg$headers$etag
revid <- gsub('\"', "", revid)
revg$headers$etag
revid <- gsub('\"', "", revg$headers$etag)
g.org <- gsub('""type": "FeatureCollection,"', paste0('_rev":', revid,'", "type": "FeatureCollection",'))
g.org <- gsub('""type": "FeatureCollection,"', paste0('_rev":', revid,'", "type": "FeatureCollection",'), g.org)
g.org
writeOGR(g.org, i, layer="meuse", driver="GeoJSON")
View(g.org)
utils::View(g.org)
j.org <- toJSON(g.org)
j.org$`_rev` <- revid
url <- paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/")
p <- PUT(url, body = g.org, authenticate(couchdb_un, couchdb_pw), verbose())
p <- PUT(url, body = j.org, authenticate(couchdb_un, couchdb_pw), verbose())
j.org <- toJSON(g.org)
library(tidyjson)
install.packages("tidyjson")
library(tidyjson)
j.org %>% enter_object("_rev") %>%
gather_array %>%
append_values_string(revid)
j.org <- as.tbl_json(g.org)
setwd("~/GitHub/burghs-eye-view-parcels")
runApp()
