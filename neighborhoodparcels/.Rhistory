all.property$delq[is.na(all.property$delq)] <- FALSE
all.property$cityowned[is.na(all.property$cityowned)] <- FALSE
all.property$INSPECTION_DATE <- as.Date(all.property$INSPECTION_DATE)
all.property$VIOLATION[is.na(all.property$VIOLATION)] <- "No Violation"
all.property$INSPECTION_RESULT[is.na(all.property$INSPECTION_RESULT)] <- ""
#Set tooltip fields with dollars and commas
all.property$tt_land <- dollarsComma(all.property$COUNTYLAND)
all.property$tt_build <- dollarsComma(all.property$COUNTYBUILDING)
all.property$tt_total <- dollarsComma(all.property$COUNTYTOTAL)
all.property$tt_sale <- dollarsComma(all.property$SALEPRICE)
all.property$tt_delq <- dollarsComma(all.property$current_delq)
all.property$tt_abatement <- dollarsComma(all.property$abatement_amt)
all.property$tt_lienamt <- dollarsComma(all.property$amount)
##Set colors for map
all.property$colorval <- "#ccc7c7"
all.property$colorval <- ifelse(all.property$program_name == "No Abatement", all.property$colorval, "#4daf4a")
all.property$colorval <- ifelse(all.property$cityowned == TRUE, "#ffff33", all.property$colorval)
#all.property$colorval <- ifelse(all.property$tif == TRUE, "#f781bf", all.property$colorval)
#all.property$colorval <- ifelse(all.property$USEDESC == "VACANT LAND", "#a65628", all.property$colorval)
all.property$colorval <- ifelse(all.property$delq == TRUE, "#e41a1c", all.property$colorval)
all.property$nhood <- as.factor(all.property$nhood)
baseURL <- "http://tools.wprdc.org/geoservice/parcels_in/pittsburgh_neighborhood/"
i <- all.property[2]
i <- levels(all.property$nhood[2])
i <- levels(all.property$nhood)[2]
count <- 1
r <- GET(paste0(baseURL,i, "/"))
f <- fromJSON(content(r, "text", encoding = "ISO-8859-1"))$features
coords <- t(as.data.frame(f[[j]]$geometry$coordinates[[1]][[1]]))
# Get data frame portion
df <- data.frame(f[[j]]$properties)
# This is a bunch of dumb stuff that sp requires to turn a list into a spatial polygon
poly <- Polygon(coords)
gons <- Polygons(c(poly), j)
spatial <- SpatialPolygons(c(gons), proj4string=CRS("+proj=utm +north +zone=16T + datum=WGS84"))
# Ensures unique ID for json
gons@ID <- as.character(j)
# Behold it is fixed
p <- SpatialPolygonsDataFrame(spatial, df, match.ID = FALSE)
# Bind to or create final
if (count == 1) {
final <- p
count <- 2
} else {
final <- spRbind(final, p)
for (j in 1:length(f)) {
# Translate Coordinates because geojsonio is dumb
coords <- t(as.data.frame(f[[j]]$geometry$coordinates[[1]][[1]]))
# Get data frame portion
df <- data.frame(f[[j]]$properties)
# This is a bunch of dumb stuff that sp requires to turn a list into a spatial polygon
poly <- Polygon(coords)
gons <- Polygons(c(poly), j)
spatial <- SpatialPolygons(c(gons), proj4string=CRS("+proj=utm +north +zone=16T + datum=WGS84"))
# Ensures unique ID for json
gons@ID <- as.character(j)
# Behold it is fixed
p <- SpatialPolygonsDataFrame(spatial, df, match.ID = FALSE)
# Bind to or create final
if (count == 1) {
final <- p
count <- 2
} else {
final <- spRbind(final, p)
}
}
couchDB$dataList <- (final)
couchDB$id <- i
cdbAddDoc(couchDB)
getcouch <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
getcouch$id <- i
par <- cdbGetDoc(getcouch)
par$res
par1 <- par$res
p <- geojson_read(par$res)
colnames(all.property$PARID) <- "pin"
colname(all.property$PARID) <- "pin"
names(all.property)[PARID]
names(all.property)["PARID"]
colnames(all.property)[1] <- "pin"
final@data <- merge(final@data, all.property, by = "pin", all.x = TRUE, all.y = FALSE, sort = FALSE)
final@data <- merge(final@data, all.property, by = "pin", all.x = TRUE, sort = FALSE)
for (j in 1:length(f)) {
# Translate Coordinates because geojsonio is dumb
coords <- t(as.data.frame(f[[j]]$geometry$coordinates[[1]][[1]]))
# Get data frame portion
df <- data.frame(f[[j]]$properties)
# This is a bunch of dumb stuff that sp requires to turn a list into a spatial polygon
poly <- Polygon(coords)
gons <- Polygons(c(poly), j)
spatial <- SpatialPolygons(c(gons), proj4string=CRS("+proj=utm +north +zone=16T + datum=WGS84"))
# Ensures unique ID for json
gons@ID <- as.character(j)
# Behold it is fixed
p <- SpatialPolygonsDataFrame(spatial, df, match.ID = FALSE)
# Bind to or create final
if (count == 1) {
final <- p
count <- 2
} else {
final <- spRbind(final, p)
}
}
count <- 1
for (j in 1:length(f)) {
# Translate Coordinates because geojsonio is dumb
coords <- t(as.data.frame(f[[j]]$geometry$coordinates[[1]][[1]]))
# Get data frame portion
df <- data.frame(f[[j]]$properties)
# This is a bunch of dumb stuff that sp requires to turn a list into a spatial polygon
poly <- Polygon(coords)
gons <- Polygons(c(poly), j)
spatial <- SpatialPolygons(c(gons), proj4string=CRS("+proj=utm +north +zone=16T + datum=WGS84"))
# Ensures unique ID for json
gons@ID <- as.character(j)
# Behold it is fixed
p <- SpatialPolygonsDataFrame(spatial, df, match.ID = FALSE)
# Bind to or create final
if (count == 1) {
final <- p
count <- 2
} else {
final <- spRbind(final, p)
}
}
final@data <- merge(final@data, all.property, by = "pin", all.x = TRUE, sort = FALSE)
options(scipen = 999)
dollarsComma <- function(x){
x <- prettyNum(x, big.mark = ",")
paste0("$", x)
}
couchdb_un <- jsonlite::fromJSON("key.json")$couchdb_un
couchdb_pw <- jsonlite::fromJSON("key.json")$couchdb_pw
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
this_year <- as.Date(format(Sys.Date(), format="%Y-01-01"))
all.property$pin <- as.factor(all.property$pin)
143515-142705
query <- "https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20%22PARID%22%2C%22PROPERTYHOUSENUM%22%2C%22PROPERTYFRACTION%22%2C%22PROPERTYADDRESS%22%2C%22PROPERTYZIP%22%2C%22MUNIDESC%22%2C%22TAXDESC%22%2C%22CLASSDESC%22%2C%22OWNERDESC%22%2C%22USEDESC%22%2C%22HOMESTEADFLAG%22%2C%22COUNTYLAND%22%2C%22COUNTYBUILDING%22%2C%22COUNTYTOTAL%22%2C%22SALEPRICE%22%2C%22SALEDATE%22%2C%22YEARBLT%22%20from%20%22518b583f-7cc8-4f60-94d0-174cc98310dc%22%20WHERE%20%22SCHOOLCODE%22%20LIKE%20%2747%27&limit=9999999"
getdata <- GET(url=query)
assessment <- jsonlite::fromJSON(content(getdata, "text"))
assessment <- assessment$result$records
assessment$MUNIDESC <- as.factor(assessment$MUNIDESC)
assessment <- subset(assessment, MUNIDESC != "Mt. Oliver  ")
View(assessment)
delinquent.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=ed0d1550-c300-4114-865c-82dc7c23235b&limit=99999"
getdelqdata <- GET(url=delinquent.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
delq <- jsonlite::fromJSON(content(getdelqdata, "text"))
delq <- delq$result$records
assessment$delq <- ifelse(assessment$PARID %in% delq$pin, TRUE, FALSE)
View(assessment)
ownership.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=4ff5eb17-e2ad-4818-97c4-8f91fc6b6396&limit=99999"
getownerdata <- GET(url=ownership.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
ownership <- jsonlite::fromJSON(content(getownerdata, "text"))
ownership <- ownership$result$records
assessment$cityown <- ifelse(assessment$PARID %in% ownership$pin, TRUE, FALSE)
abatement.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=fd924520-d568-4da2-967c-60b3a305e681&limit=99999"
getabatedata <- GET(url=abatement.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
abatement <- jsonlite::fromJSON(content(getabatedata, "text"))
abatement <- abatement$result$records
abatement.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=fd924520-d568-4da2-967c-60b3a305e681&limit=99999"
getabatedata <- GET(url=abatement.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
abatement <- jsonlite::fromJSON(content(getabatedata, "text"))
abatement <- abatement$result$records
abatement <- subset(abatement, select = c("pin", "program_name", "start_year", "num_years", "abatement_amt"))
abatement$abatement <- TRUE
liens <- read.csv("liens.csv")
system('python pghhoods.py')
load.nhood <- jsonlite::fromJSON("./pghnhoods.txt")
load.nhood <- load.nhood$result$records
load.nhood$geo_name_nhood <- as.factor(load.nhood$geo_name_nhood)
hood_list <- as.list(levels(load.nhood$geo_name_nhood))
hood_list <- gsub("\\-", "_", hood_list)
hood_list <- gsub(" ", "_", hood_list)
hood_list <- gsub("\\.", "", hood_list)
hood_list <- tolower(hood_list)
write_json(hood_list, "hoodlist.json")
all.property <- merge(all.property, abatement, by.x = "PARID", "pin", all.x = TRUE)
all.property$ADDRESS <- paste(all.property$PROPERTYHOUSENUM, all.property$PROPERTYADDRESS)
all.property$SALEDATE <- gsub("-", "/", all.property$SALEDATE)
all.property$SALEDATE <- as.Date(all.property$SALEDATE, "%m/%d/%Y")
all.property <- merge(all.property, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
all.property <- merge(all.property, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
all.property$nhood <- gsub("\\-", "_", all.property$geo_name_nhood)
all.property$nhood <- gsub(" ", "_", all.property$nhood)
all.property$nhood <- tolower(all.property$nhood)
colnames(all.property)[1] <- "PARID"
all.property <- merge(all.property, abatement, by.x = "PARID", "pin", all.x = TRUE)
all.property$ADDRESS <- paste(all.property$PROPERTYHOUSENUM, all.property$PROPERTYADDRESS)
all.property$SALEDATE <- gsub("-", "/", all.property$SALEDATE)
all.property$SALEDATE <- as.Date(all.property$SALEDATE, "%m/%d/%Y")
all.property <- merge(all.property, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
all.property <- merge(all.property, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
all.property$nhood <- gsub("\\-", "_", all.property$geo_name_nhood)
all.property$nhood <- gsub(" ", "_", all.property$nhood)
all.property$nhood <- tolower(all.property$nhood)
View(all.property)
all.property$abatement_amt[is.na(all.property$abatement_amt)] <- 0
all.property$amount[is.na(all.property$amount)] <- 0
all.property$owedto[is.na(all.property$owed)] <- 0
all.property$program_name[is.na(all.property$program_name)] <- "No Abatement"
all.property$abatement[is.na(all.property$abatement)] <- FALSE
query <- "https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20%22PARID%22%2C%22PROPERTYHOUSENUM%22%2C%22PROPERTYFRACTION%22%2C%22PROPERTYADDRESS%22%2C%22PROPERTYZIP%22%2C%22MUNIDESC%22%2C%22TAXDESC%22%2C%22CLASSDESC%22%2C%22OWNERDESC%22%2C%22USEDESC%22%2C%22HOMESTEADFLAG%22%2C%22COUNTYLAND%22%2C%22COUNTYBUILDING%22%2C%22COUNTYTOTAL%22%2C%22SALEPRICE%22%2C%22SALEDATE%22%2C%22YEARBLT%22%20from%20%22518b583f-7cc8-4f60-94d0-174cc98310dc%22%20WHERE%20%22SCHOOLCODE%22%20LIKE%20%2747%27&limit=9999999"
getdata <- GET(url=query)
assessment <- jsonlite::fromJSON(content(getdata, "text"))
assessment <- assessment$result$records
assessment$MUNIDESC <- as.factor(assessment$MUNIDESC)
assessment <- subset(assessment, MUNIDESC != "Mt. Oliver  ")
##Query Ckan API for Delinquent
delinquent.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=ed0d1550-c300-4114-865c-82dc7c23235b&limit=99999"
getdelqdata <- GET(url=delinquent.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
delq <- jsonlite::fromJSON(content(getdelqdata, "text"))
delq <- delq$result$records
assessment$delq <- ifelse(assessment$PARID %in% delq$pin, TRUE, FALSE)
##Query Ckan API for City owned property
ownership.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=4ff5eb17-e2ad-4818-97c4-8f91fc6b6396&limit=99999"
getownerdata <- GET(url=ownership.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
ownership <- jsonlite::fromJSON(content(getownerdata, "text"))
ownership <- ownership$result$records
assessment$cityown <- ifelse(assessment$PARID %in% ownership$pin, TRUE, FALSE)
##Query Ckan API for Property Tax Abatements
abatement.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=fd924520-d568-4da2-967c-60b3a305e681&limit=99999"
getabatedata <- GET(url=abatement.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
abatement <- jsonlite::fromJSON(content(getabatedata, "text"))
abatement <- abatement$result$records
abatement <- subset(abatement, select = c("pin", "program_name", "start_year", "num_years", "abatement_amt"))
abatement$abatement <- TRUE
##Lien Data
liens <- read.csv("liens.csv")
##Neighborhood
system('python pghhoods.py')
load.nhood <- jsonlite::fromJSON("./pghnhoods.txt")
load.nhood <- load.nhood$result$records
load.nhood$geo_name_nhood <- as.factor(load.nhood$geo_name_nhood)
##Create neighborhood JSON list
hood_list <- as.list(levels(load.nhood$geo_name_nhood))
hood_list <- gsub("\\-", "_", hood_list)
hood_list <- gsub(" ", "_", hood_list)
hood_list <- gsub("\\.", "", hood_list)
hood_list <- tolower(hood_list)
write_json(hood_list, "hoodlist.json")
##Merge all datasets together
all.property <- merge(all.property, abatement, by.x = "PARID", "pin", all.x = TRUE)
all.property$ADDRESS <- paste(all.property$PROPERTYHOUSENUM, all.property$PROPERTYADDRESS)
all.property$SALEDATE <- gsub("-", "/", all.property$SALEDATE)
all.property$SALEDATE <- as.Date(all.property$SALEDATE, "%m/%d/%Y")
all.property <- merge(all.property, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
all.property <- merge(all.property, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
all.property$nhood <- gsub("\\-", "_", all.property$geo_name_nhood)
all.property$nhood <- gsub(" ", "_", all.property$nhood)
all.property$nhood <- tolower(all.property$nhood)
##General Cleaning
all.property$abatement_amt[is.na(all.property$abatement_amt)] <- 0
all.property$amount[is.na(all.property$amount)] <- 0
all.property$owedto[is.na(all.property$owed)] <- 0
all.property$program_name[is.na(all.property$program_name)] <- "No Abatement"
all.property$abatement[is.na(all.property$abatement)] <- FALSE
query <- "https://data.wprdc.org/api/action/datastore_search_sql?sql=SELECT%20%22PARID%22%2C%22PROPERTYHOUSENUM%22%2C%22PROPERTYFRACTION%22%2C%22PROPERTYADDRESS%22%2C%22PROPERTYZIP%22%2C%22MUNIDESC%22%2C%22TAXDESC%22%2C%22CLASSDESC%22%2C%22OWNERDESC%22%2C%22USEDESC%22%2C%22HOMESTEADFLAG%22%2C%22COUNTYLAND%22%2C%22COUNTYBUILDING%22%2C%22COUNTYTOTAL%22%2C%22SALEPRICE%22%2C%22SALEDATE%22%2C%22YEARBLT%22%20from%20%22518b583f-7cc8-4f60-94d0-174cc98310dc%22%20WHERE%20%22SCHOOLCODE%22%20LIKE%20%2747%27&limit=9999999"
getdata <- GET(url=query)
assessment <- jsonlite::fromJSON(content(getdata, "text"))
assessment <- assessment$result$records
assessment$MUNIDESC <- as.factor(assessment$MUNIDESC)
assessment <- subset(assessment, MUNIDESC != "Mt. Oliver  ")
##Query Ckan API for Delinquent
delinquent.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=ed0d1550-c300-4114-865c-82dc7c23235b&limit=99999"
getdelqdata <- GET(url=delinquent.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
delq <- jsonlite::fromJSON(content(getdelqdata, "text"))
delq <- delq$result$records
assessment$delq <- ifelse(assessment$PARID %in% delq$pin, TRUE, FALSE)
##Query Ckan API for City owned property
ownership.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=4ff5eb17-e2ad-4818-97c4-8f91fc6b6396&limit=99999"
getownerdata <- GET(url=ownership.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
ownership <- jsonlite::fromJSON(content(getownerdata, "text"))
ownership <- ownership$result$records
assessment$cityown <- ifelse(assessment$PARID %in% ownership$pin, TRUE, FALSE)
##Query Ckan API for Property Tax Abatements
abatement.query <- "https://data.wprdc.org/api/action/datastore_search?resource_id=fd924520-d568-4da2-967c-60b3a305e681&limit=99999"
getabatedata <- GET(url=abatement.query, add_headers(Authorization = "74b409d8-0f6f-439a-8a97-7796b9a0fc8b"))
abatement <- jsonlite::fromJSON(content(getabatedata, "text"))
abatement <- abatement$result$records
abatement <- subset(abatement, select = c("pin", "program_name", "start_year", "num_years", "abatement_amt"))
abatement$abatement <- TRUE
##Lien Data
liens <- read.csv("liens.csv")
##Neighborhood
system('python pghhoods.py')
load.nhood <- jsonlite::fromJSON("./pghnhoods.txt")
load.nhood <- load.nhood$result$records
load.nhood$geo_name_nhood <- as.factor(load.nhood$geo_name_nhood)
##Create neighborhood JSON list
hood_list <- as.list(levels(load.nhood$geo_name_nhood))
hood_list <- gsub("\\-", "_", hood_list)
hood_list <- gsub(" ", "_", hood_list)
hood_list <- gsub("\\.", "", hood_list)
hood_list <- tolower(hood_list)
write_json(hood_list, "hoodlist.json")
##Merge all datasets together
parcels <- merge(all.property, abatement, by.x = "PARID", "pin", all.x = TRUE)
parcels$ADDRESS <- paste(parcels$PROPERTYHOUSENUM, parcels$PROPERTYADDRESS)
parcels$SALEDATE <- gsub("-", "/", parcels$SALEDATE)
parcels$SALEDATE <- as.Date(parcels$SALEDATE, "%m/%d/%Y")
parcels.liens <- merge(parcels, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
parcels.hoods <- merge(parcels.liens, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
parcels.hoods$nhood <- gsub("\\-", "_", parcels.hoods$geo_name_nhood)
parcels.hoods$nhood <- gsub(" ", "_", parcels.hoods$nhood)
parcels.hoods$nhood <- tolower(parcels.hoods$nhood)
##General Cleaning
parcels.hoods$abatement_amt[is.na(parcels.hoods$abatement_amt)] <- 0
parcels.hoods$amount[is.na(parcels.hoods$amount)] <- 0
parcels.hoods$owedto[is.na(parcels.hoods$owed)] <- 0
parcels.hoods$program_name[is.na(parcels.hoods$program_name)] <- "No Abatement"
parcels.hoods$abatement[is.na(parcels.hoods$abatement)] <- FALSE
parcels <- merge(assessment, abatement, by.x = "PARID", "pin", all.x = TRUE)
parcels$ADDRESS <- paste(parcels$PROPERTYHOUSENUM, parcels$PROPERTYADDRESS)
parcels$SALEDATE <- gsub("-", "/", parcels$SALEDATE)
parcels$SALEDATE <- as.Date(parcels$SALEDATE, "%m/%d/%Y")
parcels.liens <- merge(parcels, liens, by.x = "PARID", by.y = "pin", all.x = TRUE)
parcels.hoods <- merge(parcels.liens, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
parcels.hoods$nhood <- gsub("\\-", "_", parcels.hoods$geo_name_nhood)
parcels.hoods$nhood <- gsub(" ", "_", parcels.hoods$nhood)
parcels.hoods$nhood <- tolower(parcels.hoods$nhood)
##General Cleaning
parcels.hoods$abatement_amt[is.na(parcels.hoods$abatement_amt)] <- 0
parcels.hoods$amount[is.na(parcels.hoods$amount)] <- 0
parcels.hoods$owedto[is.na(parcels.hoods$owed)] <- 0
parcels.hoods$program_name[is.na(parcels.hoods$program_name)] <- "No Abatement"
parcels.hoods$abatement[is.na(parcels.hoods$abatement)] <- FALSE
parcels.hoods$colorval <- "#ccc7c7"
parcels.hoods$colorval <- ifelse(parcels.hoods$program_name == "No Abatement", parcels.hoods$colorval, "#4daf4a")
parcels.hoods$colorval <- ifelse(parcels.hoods$cityowned == TRUE, "#ffff33", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$tif == TRUE, "#f781bf", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$USEDESC == "VACANT LAND", "#a65628", parcels.hoods$colorval)
parcels.hoods$colorval <- ifelse(parcels.hoods$delq == TRUE, "#e41a1c", parcels.hoods$colorval)
parcels.hoods$nhood <- as.factor(parcels.hoods$nhood)
colnames(parcels.hoods)[1] <- "pin"
parcels.hoods$colorval <- ifelse(parcels.hoods$cityown == TRUE, "#ffff33", parcels.hoods$colorval)
baseURL <- "http://tools.wprdc.org/geoservice/parcels_in/pittsburgh_neighborhood/"
count <- levels(parcels.hoods)[2]
count <- 1
r <- GET(paste0(baseURL,i, "/"))
f <- fromJSON(content(r, "text", encoding = "ISO-8859-1"))$features
for (j in 1:length(f)) {
# Translate Coordinates because geojsonio is dumb
coords <- t(as.data.frame(f[[j]]$geometry$coordinates[[1]][[1]]))
# Get data frame portion
df <- data.frame(f[[j]]$properties)
# This is a bunch of dumb stuff that sp requires to turn a list into a spatial polygon
poly <- Polygon(coords)
gons <- Polygons(c(poly), j)
spatial <- SpatialPolygons(c(gons), proj4string=CRS("+proj=utm +north +zone=16T + datum=WGS84"))
# Ensures unique ID for json
gons@ID <- as.character(j)
# Behold it is fixed
p <- SpatialPolygonsDataFrame(spatial, df, match.ID = FALSE)
# Bind to or create final
if (count == 1) {
final <- p
count <- 2
} else {
final <- spRbind(final, p)
}
}
final@data <- merge(final@data, parcels.hoods, by = "pin", all.x = TRUE, sort = FALSE)
levels(parcels.hoods$nhood)
parcels.final <- subset(parcels.hood, nhood != "")
parcels.final <- subset(parcels.hoods, nhood != "")
parcels.final$nhood <- as.factor(parcels.final$nhood)
colnames(parcels.final)[1] <- "pin"
parcels.hoods <- merge(parcels.liens, load.nhood, by.x = "PARID", by.y = "PIN", all.x = TRUE)
parcels.hoods$nhood <- gsub("\\-", "_", parcels.hoods$geo_name_nhood)
parcels.hoods$nhood <- gsub(" ", "_", parcels.hoods$nhood)
parcels.hoods$nhood <- tolower(parcels.hoods$nhood)
##General Cleaning
parcels.hoods$abatement_amt[is.na(parcels.hoods$abatement_amt)] <- 0
parcels.hoods$amount[is.na(parcels.hoods$amount)] <- 0
parcels.hoods$owedto[is.na(parcels.hoods$owed)] <- 0
parcels.hoods$program_name[is.na(parcels.hoods$program_name)] <- "No Abatement"
parcels.hoods$abatement[is.na(parcels.hoods$abatement)] <- FALSE
##Set colors for map
parcels.hoods$colorval <- "#ccc7c7"
parcels.hoods$colorval <- ifelse(parcels.hoods$program_name == "No Abatement", parcels.hoods$colorval, "#4daf4a")
parcels.hoods$colorval <- ifelse(parcels.hoods$cityown == TRUE, "#ffff33", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$tif == TRUE, "#f781bf", parcels.hoods$colorval)
#parcels.hoods$colorval <- ifelse(parcels.hoods$USEDESC == "VACANT LAND", "#a65628", parcels.hoods$colorval)
parcels.hoods$colorval <- ifelse(parcels.hoods$delq == TRUE, "#e41a1c", parcels.hoods$colorval)
parcels.final <- subset(parcels.hoods, nhood != "")
parcels.final$nhood <- as.factor(parcels.final$nhood)
colnames(parcels.final)[1] <- "pin"
levels(parcels.final$nhood)
library(rgdal)
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")$features
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
final@data <- merge(final@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
final@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
##Final add data
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
#Couch DB Function posting to DB goes here
##CouchDB Connection
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
couchDB$dataList <- (org)
couchDB$id <- i
#cdbAddDoc(couchDB)
hood_list <- fromJSON("hoodlist.json")
hood_list <- fromJSON("hoodlist.json")
value_list <- fromJSON("hoodlist.json")
couchDB$id <- org@data$geo_name_nhood[1]
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
couchdb_un <- jsonlite::fromJSON("key.json")$couchdb_un
couchdb_pw <- jsonlite::fromJSON("key.json")$couchdb_pw
library(R4CouchDB)
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels", id =hoodname)
hoodname <- i
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels", id =hoodname)
hood <- cdbGetDoc(couchDB)
r <- cdbGetDoc(couchDB)
hood <- content(r, "text")
hood <- fromJSON(r)
r <- cdbGetDoc(couchDB)$res
r <- cdbGetDoc(couchDB)$res$data
r <- cdbGetDoc(couchDB)$res
org <- readOGR(r, "OGRGeoJSON", verbose = F)
r <- cdbGetDoc(couchDB)$res$data
r
org <- readOGR(r, "OGRGeoJSON", verbose = F)
setwd("~/GitHub/burghs-eye-view-parcels")
levels(parcels.final$nhood)
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname),
add_headers('Content Type' = "application/json"))
r <- content(c)
hoodname <- "morningside"
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname),
add_headers('Content Type' = "application/json"))
r <- content(c)
hoodname <- allegheny_center
hoodname <- "allegheny_center"
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname),
add_headers('Content Type' = "application/json"))
r <- content(c)
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname)
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname))
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/_utils/document.html?neighborhood_parcels/", hoodname))
r <- content(c)
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", hoodname), add_headers(`Content-Type`= "application/json"))
r <- content(c)
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", hoodname))
hoodname <- "allegheny_center"
c <- GET(paste("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", hoodname), add_headers(`Content-Type`= "application/json"))
r <- content(c)
c <- GET(paste0("http://webhost.pittsburghpa.gov:5984/neighborhood_parcels/", hoodname), add_headers(`Content-Type`= "application/json"))
r <- content(c)
baseURL <- "http://tools.wprdc.org/geoservice/parcels_in/pittsburgh_neighborhood/"
r <- GET(paste0(baseURL,i, "/"))
f <- content(r, "text", encoding = "ISO-8859-1")
org <- readOGR(f, "OGRGeoJSON", verbose = F)
##Final add data
org@data <- merge(org@data, parcels.final, by = "pin", all.x = TRUE, sort = FALSE)
g.org <- writeOGR(org, "parcel_geojson", layer="meuse", driver="GeoJSON")
g.org <- writeOGR(org, "parcel_geojson", layer="meuse", driver="GeoJSON")
setwd("~/")
writeOGR(org, i, layer="meuse", driver="GeoJSON")
writeOGR(org, i, layer="meuse", driver="GeoJSON")
g.org <- read_lines(i)
g.org
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
couchDB$dataList <- (g.org)
couchDB$id <- i
cdbUpdateDoc(couchDB)
filename <- paste0("./neighborhoodparcels/", i)
writeOGR(org, filename, layer="meuse", driver="GeoJSON")
filename <- paste0("~/neighborhoodparcels/", i)
writeOGR(org, filename, layer="meuse", driver="GeoJSON")
setwd("~/GitHub/burghs-eye-view-parcels")
filename <- paste0("~/neighborhoodparcels/", i)
writeOGR(org, filename, layer="meuse", driver="GeoJSON")
setwd("~/neighborhoodparcels")
setwd("./neighborhoodparcels")
writeOGR(org, i, layer="meuse", driver="GeoJSON")
install.packages("rgdal")
library(jsonlite)
library(httr)
library(dplyr)
library(plyr)
library(lubridate)
library(R4CouchDB)
library(geojsonio)
library(maptools)
library(rgdal)
library(rgdal)
.libPaths("C:/util")
library(jsonlite)
library(httr)
library(dplyr)
library(plyr)
library(lubridate)
library(R4CouchDB)
library(geojsonio)
library(maptools)
library(rgdal)
install.packages("rgdal")
library(rgdal)
writeOGR(org, i, layer="meuse", driver="GeoJSON")
g.org <- read_lines(i)
install.packages("geojsonio")
g.org <- readr::read_lines(i)
couchDB <- cdbIni(serverName = "webhost.pittsburghpa.gov", uname = couchdb_un, pwd = couchdb_pw, DBName = "neighborhood_parcels")
couchDB$dataList <- (g.org)
couchDB$id <- i
cdbUpdateDoc(couchDB)
